package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private OpIterator child1;
    private OpIterator child2;
    private JoinPredicate jpr;
    private Tuple child1tup;
    private TupleDesc joinedTD;
    private int length1;
    private int length2;
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
    	this.child1 = child1;
    	this.child2 = child2;
    	this.jpr = p;
    	this.joinedTD = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    	this.length1 = child1.getTupleDesc().numFields();
    	this.length2 = child2.getTupleDesc().numFields();
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return jpr;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return child1.getTupleDesc().getFieldName(jpr.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
    	return child2.getTupleDesc().getFieldName(jpr.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return joinedTD;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	child1.open();
    	child2.open();
    	super.open();
    }

    public void close() {
        // some code goes here
    	child1.close();
    	child2.close();
    	super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	child1.rewind();
    	child2.rewind();
    	child1tup = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	if(child1tup == null) {child1tup = child1.next();}
    	
    	do {
    		while(child2.hasNext()) {
        		Tuple t2 = child2.next();
        		if(jpr.filter(child1tup, t2)){
        			return merge(child1tup, t2);
        		}
        	}
    		child2.rewind();
    	}while(child1.hasNext() && (child1tup = child1.next()) != null);
    	return null;
    }
    
    /**
     * Returns the merged tuple from t1 from child1 and t2 from child2.
     * The returned tuple follows the merged TupleDesc
     */
    private Tuple merge(Tuple t1, Tuple t2) {
    	Tuple mergedTup = new Tuple(joinedTD);
    	for(int i=0; i<length1; i++) {
    		mergedTup.setField(i, t1.getField(i));
    	}
    	for(int i=0; i<length2; i++) {
    		mergedTup.setField(length1+i, t2.getField(i));
    	}
    	return mergedTup;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[] {child1, child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
    	this.child1 = children[0];
    	this.child2 = children[1];
    }

}
